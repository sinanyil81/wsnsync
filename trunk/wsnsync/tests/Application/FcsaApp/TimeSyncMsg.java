/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TimeSyncMsg'
 * message type.
 */

public class TimeSyncMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 17;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 62;

    /** Create a new TimeSyncMsg of size 17. */
    public TimeSyncMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TimeSyncMsg of the given data_length. */
    public TimeSyncMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeSyncMsg with the given data_length
     * and base offset.
     */
    public TimeSyncMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeSyncMsg using the given byte array
     * as backing store.
     */
    public TimeSyncMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeSyncMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TimeSyncMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeSyncMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TimeSyncMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeSyncMsg embedded in the given message
     * at the given base offset.
     */
    public TimeSyncMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeSyncMsg embedded in the given message
     * at the given base offset and length.
     */
    public TimeSyncMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TimeSyncMsg> \n";
      try {
        s += "  [nodeID=0x"+Long.toHexString(get_nodeID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [localTime=0x"+Long.toHexString(get_localTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [multiplier=0x"+Long.toHexString(get_multiplier())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rootID=0x"+Long.toHexString(get_rootID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [globalTime=0x"+Long.toHexString(get_globalTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seqNum=0x"+Long.toHexString(get_seqNum())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeID
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeID' is signed (false).
     */
    public static boolean isSigned_nodeID() {
        return false;
    }

    /**
     * Return whether the field 'nodeID' is an array (false).
     */
    public static boolean isArray_nodeID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeID'
     */
    public static int offset_nodeID() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeID'
     */
    public static int offsetBits_nodeID() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'nodeID'
     */
    public int get_nodeID() {
        return (int)getUIntBEElement(offsetBits_nodeID(), 16);
    }

    /**
     * Set the value of the field 'nodeID'
     */
    public void set_nodeID(int value) {
        setUIntBEElement(offsetBits_nodeID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeID'
     */
    public static int size_nodeID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeID'
     */
    public static int sizeBits_nodeID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: localTime
    //   Field type: long, unsigned
    //   Offset (bits): 16
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'localTime' is signed (false).
     */
    public static boolean isSigned_localTime() {
        return false;
    }

    /**
     * Return whether the field 'localTime' is an array (false).
     */
    public static boolean isArray_localTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'localTime'
     */
    public static int offset_localTime() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'localTime'
     */
    public static int offsetBits_localTime() {
        return 16;
    }

    /**
     * Return the value (as a long) of the field 'localTime'
     */
    public long get_localTime() {
        return (long)getUIntBEElement(offsetBits_localTime(), 32);
    }

    /**
     * Set the value of the field 'localTime'
     */
    public void set_localTime(long value) {
        setUIntBEElement(offsetBits_localTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'localTime'
     */
    public static int size_localTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'localTime'
     */
    public static int sizeBits_localTime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: multiplier
    //   Field type: long, unsigned
    //   Offset (bits): 48
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'multiplier' is signed (false).
     */
    public static boolean isSigned_multiplier() {
        return false;
    }

    /**
     * Return whether the field 'multiplier' is an array (false).
     */
    public static boolean isArray_multiplier() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'multiplier'
     */
    public static int offset_multiplier() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'multiplier'
     */
    public static int offsetBits_multiplier() {
        return 48;
    }

    /**
     * Return the value (as a long) of the field 'multiplier'
     */
    public long get_multiplier() {
        return (long)getUIntBEElement(offsetBits_multiplier(), 32);
    }

    /**
     * Set the value of the field 'multiplier'
     */
    public void set_multiplier(long value) {
        setUIntBEElement(offsetBits_multiplier(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'multiplier'
     */
    public static int size_multiplier() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'multiplier'
     */
    public static int sizeBits_multiplier() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rootID
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rootID' is signed (false).
     */
    public static boolean isSigned_rootID() {
        return false;
    }

    /**
     * Return whether the field 'rootID' is an array (false).
     */
    public static boolean isArray_rootID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rootID'
     */
    public static int offset_rootID() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rootID'
     */
    public static int offsetBits_rootID() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'rootID'
     */
    public int get_rootID() {
        return (int)getUIntBEElement(offsetBits_rootID(), 16);
    }

    /**
     * Set the value of the field 'rootID'
     */
    public void set_rootID(int value) {
        setUIntBEElement(offsetBits_rootID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'rootID'
     */
    public static int size_rootID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rootID'
     */
    public static int sizeBits_rootID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: globalTime
    //   Field type: long, unsigned
    //   Offset (bits): 96
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'globalTime' is signed (false).
     */
    public static boolean isSigned_globalTime() {
        return false;
    }

    /**
     * Return whether the field 'globalTime' is an array (false).
     */
    public static boolean isArray_globalTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'globalTime'
     */
    public static int offset_globalTime() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'globalTime'
     */
    public static int offsetBits_globalTime() {
        return 96;
    }

    /**
     * Return the value (as a long) of the field 'globalTime'
     */
    public long get_globalTime() {
        return (long)getUIntBEElement(offsetBits_globalTime(), 32);
    }

    /**
     * Set the value of the field 'globalTime'
     */
    public void set_globalTime(long value) {
        setUIntBEElement(offsetBits_globalTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'globalTime'
     */
    public static int size_globalTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'globalTime'
     */
    public static int sizeBits_globalTime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqNum
    //   Field type: short, unsigned
    //   Offset (bits): 128
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqNum' is signed (false).
     */
    public static boolean isSigned_seqNum() {
        return false;
    }

    /**
     * Return whether the field 'seqNum' is an array (false).
     */
    public static boolean isArray_seqNum() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqNum'
     */
    public static int offset_seqNum() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqNum'
     */
    public static int offsetBits_seqNum() {
        return 128;
    }

    /**
     * Return the value (as a short) of the field 'seqNum'
     */
    public short get_seqNum() {
        return (short)getUIntBEElement(offsetBits_seqNum(), 8);
    }

    /**
     * Set the value of the field 'seqNum'
     */
    public void set_seqNum(short value) {
        setUIntBEElement(offsetBits_seqNum(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqNum'
     */
    public static int size_seqNum() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqNum'
     */
    public static int sizeBits_seqNum() {
        return 8;
    }

}
