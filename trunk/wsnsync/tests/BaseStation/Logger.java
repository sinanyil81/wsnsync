/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'Logger'
 * message type.
 */

public class Logger extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 11;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;

    /** Create a new Logger of size 11. */
    public Logger() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new Logger of the given data_length. */
    public Logger(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Logger with the given data_length
     * and base offset.
     */
    public Logger(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Logger using the given byte array
     * as backing store.
     */
    public Logger(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Logger using the given byte array
     * as backing store, with the given base offset.
     */
    public Logger(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Logger using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public Logger(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Logger embedded in the given message
     * at the given base offset.
     */
    public Logger(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Logger embedded in the given message
     * at the given base offset and length.
     */
    public Logger(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "";
      try {
        s += "  [nodeid=0x"+Long.toHexString(get_nodeid())+"]";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [clock=0x"+Long.toHexString(get_clock())+"]";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [received=0x"+Long.toHexString(get_received())+"]";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sent=0x"+Long.toHexString(get_sent())+"]";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [synced=0x"+Long.toHexString(get_synced())+"]";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeid
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeid' is signed (false).
     */
    public static boolean isSigned_nodeid() {
        return false;
    }

    /**
     * Return whether the field 'nodeid' is an array (false).
     */
    public static boolean isArray_nodeid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeid'
     */
    public static int offset_nodeid() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeid'
     */
    public static int offsetBits_nodeid() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'nodeid'
     */
    public int get_nodeid() {
        return (int)getUIntBEElement(offsetBits_nodeid(), 16);
    }

    /**
     * Set the value of the field 'nodeid'
     */
    public void set_nodeid(int value) {
        setUIntBEElement(offsetBits_nodeid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeid'
     */
    public static int size_nodeid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeid'
     */
    public static int sizeBits_nodeid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: clock
    //   Field type: long, unsigned
    //   Offset (bits): 16
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'clock' is signed (false).
     */
    public static boolean isSigned_clock() {
        return false;
    }

    /**
     * Return whether the field 'clock' is an array (false).
     */
    public static boolean isArray_clock() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'clock'
     */
    public static int offset_clock() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'clock'
     */
    public static int offsetBits_clock() {
        return 16;
    }

    /**
     * Return the value (as a long) of the field 'clock'
     */
    public long get_clock() {
        return (long)getUIntBEElement(offsetBits_clock(), 32);
    }

    /**
     * Set the value of the field 'clock'
     */
    public void set_clock(long value) {
        setUIntBEElement(offsetBits_clock(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'clock'
     */
    public static int size_clock() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'clock'
     */
    public static int sizeBits_clock() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: received
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'received' is signed (false).
     */
    public static boolean isSigned_received() {
        return false;
    }

    /**
     * Return whether the field 'received' is an array (false).
     */
    public static boolean isArray_received() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'received'
     */
    public static int offset_received() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'received'
     */
    public static int offsetBits_received() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'received'
     */
    public int get_received() {
        return (int)getUIntBEElement(offsetBits_received(), 16);
    }

    /**
     * Set the value of the field 'received'
     */
    public void set_received(int value) {
        setUIntBEElement(offsetBits_received(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'received'
     */
    public static int size_received() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'received'
     */
    public static int sizeBits_received() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sent
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sent' is signed (false).
     */
    public static boolean isSigned_sent() {
        return false;
    }

    /**
     * Return whether the field 'sent' is an array (false).
     */
    public static boolean isArray_sent() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sent'
     */
    public static int offset_sent() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sent'
     */
    public static int offsetBits_sent() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'sent'
     */
    public int get_sent() {
        return (int)getUIntBEElement(offsetBits_sent(), 16);
    }

    /**
     * Set the value of the field 'sent'
     */
    public void set_sent(int value) {
        setUIntBEElement(offsetBits_sent(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sent'
     */
    public static int size_sent() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sent'
     */
    public static int sizeBits_sent() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: synced
    //   Field type: short, unsigned
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'synced' is signed (false).
     */
    public static boolean isSigned_synced() {
        return false;
    }

    /**
     * Return whether the field 'synced' is an array (false).
     */
    public static boolean isArray_synced() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'synced'
     */
    public static int offset_synced() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'synced'
     */
    public static int offsetBits_synced() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'synced'
     */
    public short get_synced() {
        return (short)getUIntBEElement(offsetBits_synced(), 8);
    }

    /**
     * Set the value of the field 'synced'
     */
    public void set_synced(short value) {
        setUIntBEElement(offsetBits_synced(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'synced'
     */
    public static int size_synced() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'synced'
     */
    public static int sizeBits_synced() {
        return 8;
    }

}
